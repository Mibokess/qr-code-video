@page "/qr"

@inject IJSRuntime JSRuntime

@using BlazorInputFile
@using System.Text

<input type="text" @bind="InputText" placeholder="Type here..."/>
<input type="text" @bind="ChunkSize" placeholder="Chunk size..."/>
<button @onclick="GenerateQRCode">Generate QR code</button>

<div id="qrCode"></div>

<div class="drag-drop-zone">
    <InputFile OnChange="ViewFile" />
    @status
</div>

<video type="video/mp4" id="player" width="480" height="270" controls></video>
<button @onclick="PlayVideo">Play video</button>
<canvas id="frame"></canvas>
<p id="progress"></p>

<button @onclick="ExtractFrames">Extract frames</button>

@if (fileName != null)
{
    <h3>@fileName</h3>
    <pre>@fileTextContents</pre>
}

@code {
    const string DefaultStatus = "Drop a text file here to view it, or click to choose a file";
    const int MaxFileSize = 5 * 1024 * 1024; // 5MB
    string status = DefaultStatus;
    string fileName;
    string fileTextContents = "";
    byte[] inputFile;

    string InputText {get; set;} = "";
    string ChunkSize {get; set;} = "";
    const int speed = 500;

    async void ExtractFrames()
    {
        await JSRuntime.InvokeVoidAsync("extractFrames");
    }
    async Task ViewFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        
        if (file == null)
        {
            return;
        }
        else if (file.Size > MaxFileSize)
        {
            status = $"That's too big. Max size: {MaxFileSize} bytes.";
        }
        else
        {
            status = "Loading...";

            using (var reader = await file.ReadAllAsync(MaxFileSize))
            {
                int hexIn;
                StringBuilder stringBuilder = new StringBuilder((int) reader.Length);
                inputFile = new byte[reader.Length];

                for (int i = 0; (hexIn = reader.ReadByte()) != -1; ++i)
                {
                    stringBuilder.Append(string.Format("{0:X2}", hexIn)); //Convert.ToString(hexIn, 2)
                    inputFile[i] = (byte) hexIn;
                }

                fileTextContents = stringBuilder.ToString();
               
                fileName = file.Name;
            }

            status = DefaultStatus;
        }
    }
    async void PlayVideo() 
    {
        await JSRuntime.InvokeVoidAsync("playVideo", fileTextContents);
    }
    async void GenerateQRCode()
    {
        var SplitInputText = ChunksUpto(InputText, int.Parse(ChunkSize));
        Console.WriteLine(SplitInputText);

        await JSRuntime.InvokeAsync<string>("generateQRCode", SplitInputText, speed); 
    }
    static IEnumerable<string> ChunksUpto(string input, int maxChunkSize) 
    {
        for (int i = 0; i < input.Length; i += maxChunkSize) 
        {
            yield return input.Substring(i, Math.Min(maxChunkSize, input.Length - i));
        }
    } 
}
